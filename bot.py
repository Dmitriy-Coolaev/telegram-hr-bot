import json
import logging
import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart
from aiogram.utils.keyboard import InlineKeyboardBuilder
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env (–µ—Å–ª–∏ —Ñ–∞–π–ª –µ—Å—Ç—å)
from pathlib import Path
env_path = Path('.') / '.env'
if env_path.exists():
    from dotenv import load_dotenv
    load_dotenv(env_path)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = "8301872894:AAFIeLfIOkUetGjWo7fBbMleHYVDN8KoJBU"

print("DEBUG: env keys =", list(os.environ.keys()))
print("DEBUG: BOT_TOKEN =", os.environ.get("BOT_TOKEN"))

if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å .env –ª–æ–∫–∞–ª—å–Ω–æ –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Railway")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
def load_json(filename: str):
    with open(filename, "r", encoding="utf-8") as f:
        return json.load(f)

QUESTIONS = load_json("questions.json")
RESULTS = load_json("results.json")

# --- –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
user_data = {}

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
@dp.message(CommandStart())
async def start(message: Message):
    user_id = message.from_user.id
    user_data[user_id] = {"current_q": 0, "scores": {}}

    await message.answer("‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ—Å—Ç '–ö—Ç–æ —Ç—ã –∏–∑ HR?' ‚ú®")
    await send_question(message.chat.id, user_id)

# --- –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ ---
async def send_question(chat_id, user_id):
    data = user_data[user_id]
    q_index = data["current_q"]

    if q_index >= len(QUESTIONS):
        await show_result(chat_id, user_id)
        return

    q = QUESTIONS[q_index]
    text = f"‚ùì <b>{q['question']}</b>"
    builder = InlineKeyboardBuilder()

    for i, option in enumerate(q["options"]):
        builder.button(text=option["text"], callback_data=f"answer_{i}")

    builder.adjust(1)
    await bot.send_message(chat_id, text, reply_markup=builder.as_markup(), parse_mode="HTML")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ ---
@dp.callback_query(F.data.startswith("answer_"))
async def handle_answer(callback: CallbackQuery):
    user_id = callback.from_user.id
    data = user_data[user_id]
    q_index = data["current_q"]
    answer_index = int(callback.data.split("_")[1])

    question = QUESTIONS[q_index]
    option = question["options"][answer_index]

    # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–ª–ª—ã –ø–æ –≤—Å–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º
    for name, score in option["scores"].items():
        data["scores"][name] = data["scores"].get(name, 0) + score

    data["current_q"] += 1
    await callback.message.delete()
    await send_question(callback.message.chat.id, user_id)

# --- –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ---
async def show_result(chat_id, user_id):
    scores = user_data[user_id]["scores"]

    if not scores:
        await bot.send_message(chat_id, "–¢—ã –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∏ –Ω–∞ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å üòÖ")
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    winner = max(scores, key=scores.get)
    result = RESULTS.get(winner, {"description": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂", "image": None})

    text = f"üèÜ <b>–¢—ã ‚Äî {winner}!</b>\n\n{result['description']}"
    if result.get("image"):
        await bot.send_photo(chat_id, photo=result["image"], caption=text, parse_mode="HTML")
    else:
        await bot.send_message(chat_id, text, parse_mode="HTML")

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == "__main__":
    asyncio.run(dp.start_polling(bot))


